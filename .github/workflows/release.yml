name: Release

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: "Name the release"
        required: true
        default: "Minify-v1.xx.x"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set version (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: pwsh
        run: |
          $releaseName = "${{ github.event.inputs.release_name }}"
          $version = $releaseName.Substring(8)
          Set-Content -Path "version" -Value $version -NoNewline
      - name: Set version (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          releaseName="${{ github.event.inputs.release_name }}"
          version="${releaseName#Minify-}"
          printf "%s" "$version" > version
      - uses: stefanzweifel/git-auto-commit-action@v5
        if: matrix.os == 'ubuntu-latest'
        with:
          commit_message: "Version change"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build executable (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: pyinstaller --noconsole --icon=bin/images/favicon.ico --name=Minify --hidden-import=tkinter imgui.py
      - name: Build executable (macOS)
        if: matrix.os == 'macos-latest'
        run: pyinstaller Minify.spec

      - name: Bundle app contents (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          rsync -a --exclude rescomproot --exclude gamepakcontents.txt bin/ dist/Minify.app/Contents/MacOS/bin/
          rsync -a mods/ dist/Minify.app/Contents/MacOS/mods/
          cp version dist/Minify.app/Contents/MacOS/version

      - name: Move project dependencies (Windows/Linux)
        if: matrix.os != 'macos-latest'
        shell: pwsh
        run: |
          Copy-Item -Path "bin" -Destination "dist/Minify/bin" -Recurse -Exclude "rescomproot","gamepakcontents.txt"
          Copy-Item -Path "mods" -Destination "dist/Minify/mods" -Recurse
          Copy-Item -Path "version" -Destination "dist/Minify/version"

      - name: Archiving (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path "dist/Minify" -DestinationPath "${{ github.event.inputs.release_name }}-windows.zip"
      - name: Archiving (Linux)
        shell: pwsh
        if: matrix.os == 'ubuntu-latest'
        run: |
          Compress-Archive -Path "dist/Minify" -DestinationPath "${{ github.event.inputs.release_name }}-linux.zip"
      - name: Archiving (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          # Use ditto to preserve app bundle structure
          ditto -c -k --sequesterRsrc --keepParent "dist/Minify.app" "${{ github.event.inputs.release_name }}-macos.zip"

      - name: Create Release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          files: "${{ github.event.inputs.release_name }}-windows.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          files: "${{ github.event.inputs.release_name }}-linux.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release (macOS)
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          files: "${{ github.event.inputs.release_name }}-macos.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
